# -*- coding: utf-8 -*-
"""pyda-lab-0620.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16KgTZJttcMAdlF8h_iAxA0GqX0euNPep

## Лабораторная работа по курсу «Python для анализа данных»

### При выполнении работы допускается использование любых внешних модулей и пакетов.

#### Задача 1

Дана строка:
"""

string_01 = "History is always written by the winners. When two cultures clash, the loser is obliterated, and the winner writes the history books - books which glorify their own cause and disparage the conquered foe. As Napoleon once said, 'What is history, but a fable agreed upon?'"

"""1. Посчитайте, сколько в строке символов, исключая пробелы:"""

import re
pattern = r"\S"
print(len(re.findall(pattern, string_01)))

"""2. Посчитайте, сколько в строке слов."""

print(len(re.findall(r"(\w)+", string_01)))

"""3. Напишите функцию, которая будет принимать в качестве аргумента букву и выводить все слова из строки, начинающиеся на эту букву (например, “w”)."""

def num_words_by_letter(letter):
    pattern = fr"{letter}\w+"
    print(re.findall(pattern, string_01))

num_words_by_letter('H')
num_words_by_letter('t')

"""#### Задача 2

Напишите код, который будет генерировать случайную последовательность из 6 цифр, одна из которых должна быть 3. Позиция цифры 3 должна
определяться случайным образом. Результат должен быть строкой. Например: "456309" или "330127".
"""

import random

position = random.randrange(6)
print(position)
digit_letters = '0123456789'
rand_string_1 = ''.join(random.choice(digit_letters) for i in range(position))
rand_string_2 = ''.join(random.choice(digit_letters) for i in range(6 - position - 1))
print(rand_string_1 + '3' + rand_string_2)

"""#### Задача 3

Дан список:
"""

list_01 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 14, 46, 273, 22, 99, 15, 1000]

"""Напишите алгоритм, который выводит число, равное сумме элементов списка, которые больше 10, но меньше 100, и которые больше 200, но меньше 500."""

list_01 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 14, 46, 273, 22, 99, 15, 1000]

list_02 = [value for value in list_01 if 10 < value < 100 or 200 < value < 500]
print(sum(list_02))

"""#### Задача 4

Данные студентов представлены в виде списка списков:
"""

students = [
["0001", "Антонов", "Антон", "Игоревич", "20.08.2009","БСТ161"],
["1102", "Богов", "Артем", "Игоревич", "25.01.2010","БСТ162"],
["0333", "Глаголева", "Анастасия", "Николаевна", "11.07.2009", "БСТ163"],
["4004", "Степанова", "Наталья", "Александровна", "13.02.2008", "БСТ161"],
["0045", "Боков", "Игорь", "Харитонович", "02.06.2009", "БСТ161"],
["0096", "Васильков", "Валентин", "Сергеевич", "20.03.2009", "БСТ164"],
["0607", "Сиропова", "Виолетта", "Эдуардовна", "28.05.2010", "БСТ162"]
    ]

"""1. Преобразуйте данные таким образом, чтобы они были представлены в виде словаря, в котором ключами являются номера студентов, а значениями — список из других данных о студентах."""

st = {}

for student in students:
    st[student[0]] = [student[1], student[2], student[3], student[4], student[5]]

print(st)

"""2. Напишите функцию, которая принимает в качестве аргумента номер студента и новый номер группы и позволяет изменить номер группы этого студента на новый внутри созданного словаря."""

def change_group_number(st_num, new_group_num):
    st[st_num][4] = new_group_num
    
change_group_number('0001', 'БСТ666')
print(st['0001'])

"""3. Напишите функцию, которая принимает номер группы и выводит список (фамилии, имена, отчества) всех студентов этой группы. Необходимо обращаться к словарю."""

def list_by_group(group):
    list = [[value[0], value[1], value[2]] for value in st.values() if value[4] == group]
    print(list)

list_by_group('БСТ162')

"""#### Задача 5

Дана матрица:
"""

matrix = [ 
    [0,1,2,4,8], 
    [6,2,2,1,9], 
    [3,3,3,3,3], 
    [4,6,7,1,2], 
    [5,7,3,4,0] 
]

"""1. Выведите результат сложения всех элементов матрицы."""

sum([sum(value) for value in matrix])

"""2. Напишите алгоритм вычисления максимума из сумм элементов каждого столбца."""

column_sums = []

for i in range(len(matrix[0])):
  column_sums.append(sum([value[i] for value in matrix]))

print(max(column_sums))